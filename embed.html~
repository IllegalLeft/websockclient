<!DOCTYPE html>
<html><head><meta charset="UTF-8">

<link rel="stylesheet" href="https://rawgit.com/grapenut/websockclient/master/ansi.css">
<style>
  html, body {
    width: 100%;
    height: 100%;
    margin: 0;
    overflow: hidden;
    background: rgba(64,64,64,1.0);
    font-family: 'Courier New', monospace;
    font-size: 10pt;
    font-weight: normal;
  }

  a {
    display: inline;
    text-decoration: none;
    border-bottom: 1px solid blue;
  }

  a:hover {
    cursor: pointer;
  }

  textarea {
    font-family: inherit;
    font-size: inherit;
  }

  ul, li {
    list-style-type: none;
  }
  
  .localEcho {
    color: yellow;
    font-weight: bold;
  }

  .logMessage {
    color: red;
    font-weight: bold;
  }

  #terminal {
    position: fixed;
    margin: 0;
    padding: 0;
    border: none;
    background: black;
    left: 3em;
    right: 3em;
    top: 3em;
    bottom: 3em;
    box-shadow: 0 0 0.2em 0.1em gray;
    overflow: hidden;
  }

  #output {
    overflow-y: auto;
    overflow-x: hidden;
    white-space: pre-wrap;
    word-wrap: break-word;
    position: absolute;
    margin: 0;
    border: 0;
    padding: 0.5em 0.5% 0.5em 0.5%;
    left: 0;
    width: 99%;
    top: 0;
    bottom: 7em;
  }

  #quicklinks {
    display: table-cell;
    overflow: hidden;
    position: absolute;
    left: 0;
    width: 100%;
    bottom: 5em;
    height: 2em;
    vertical-align: middle;
    text-align: center;
  }

  #prompt {
    overflow: hidden;
    white-space: pre-wrap;
    text-align: left;
    position: absolute;
    margin: 0;
    left: 0;
    width: 100%;
    bottom: 4em;
    height: 1em;
  }

  #input {
    position: absolute;
    margin: 0;
    background: black;
    color: silver;
    border: none;
    outline: none;
    vertical-align: middle;
    padding: 0.5em 0.5% 0.5em 0.5%;
    resize: none;
    left: 0;
    width: 99%;
    bottom: 0;
    height: 3em;
  }
</style>
<base target="_blank">

<title>Minimal Websocket JavaScript Client</title></head>

<body onLoad="input.focus()"
      onUnload="conn.sendText('QUIT'); setTimeout(conn.close, 1000);"
      onClick="input.focus()">

<div id="terminal">
  <div id="output" class="ansi-37 ansi-40"></div>
  <div id="quicklinks" class="ansi-1-34 ansi-40">
    <a onClick='output.onCommand("who");'>WHO</a>
    <a onClick='output.onCommand("look");'>LOOK</a>
    <a onClick='output.onCommand("inventory");'>INVENTORY</a>
    <a onClick='output.onCommand("@mail");'>MAIL</a>
    <a onClick='output.onCommand("+bb");'>BBOARD</a>
    <a onClick='output.onCommand("home");'>HOME</a>
    <a onClick="output.clear(); cmdprompt.clear();">CLEAR OUTPUT</a></div>
  <div id="prompt" class="ansi-37 ansi-40"></div>
  <textarea id="input" autocomplete="off" autofocus></textarea>
</div>

<script type="text/javascript" src="https://rawgit.com/grapenut/websockclient/master/wsclient.js"></script>
<script type="text/javascript">
  var serverAddress = window.location.hostname;
  var serverPort = '4201';

  // The connection URL is ws://host:port/wsclient (or wss:// for SSL connections)
  var serverUrl = 'ws://' + serverAddress + ":" + serverPort + '/wsclient'

  // define the input box, output terminal, and network connection
  var output = WSClient.output(document.getElementById('output'));
  var cmdprompt = WSClient.output(document.getElementById('prompt'));
  var input = WSClient.input(document.getElementById('input'));
  var conn = WSClient.connect(serverUrl);

  // function to send a command string to the server
  function sendCommand(cmd) {
    if (conn.isConnected()) {
      if (cmd !== '') {
        conn.sendText(cmd);
        output.appendMessage('localEcho', cmd);
      }
    } else {
      // connection was broken, let's reconnect
      conn.reconnect();
      output.appendMessage('logMessage', '%% Reconnecting to server...');
    }
  }
  
  // just log a standard message on these socket status events
  conn.onOpen = function (evt) { output.appendMessage('logMessage', '%% Connected.'); };
  conn.onError = function (evt) { output.appendMessage('logMessage', '%% Connection error!'); };
  conn.onClose = function (evt) { output.appendMessage('logMessage', '%% Connection closed.'); };

  // handle incoming text, html, pueblo, or command prompts
  conn.onText = function (text) { output.appendText(text); };
  conn.onHTML = function (fragment) { output.appendHTML(fragment); };
  conn.onPueblo = function (tag, attrs) { output.appendPueblo(tag, attrs); };
  conn.onPrompt = function (text) { cmdprompt.clear(); cmdprompt.appendText(text + '\r\n'); };
  
  // handle incoming JSON objects. requires server specific implementation
  conn.onObject = function (obj) { console.log('unhandled JSON object' + obj); };

  // pueblo command links, prompt for user input and replace ?? token if present
  output.onCommand = function(cmd) { sendCommand(WSClient.parseCommand(cmd)); };

  // enter key passthrough from WSClient.pressKey
  input.onEnter = function(cmd) { sendCommand(cmd); };
  
  // escape key passthrough from WSClient.pressKey
  input.onEscape = function () { this.clear(); };
  
  // input key event callbacks. here we show the defaults
  // provided by WSClient.pressKey and WSClient.releaseKey
  // input.onKeyDown = function(e) { WSClient.pressKey(this, e); };
  // input.onKeyUp = function(e) { WSClient.releaseKey(this, e); };
  
  // which keys are used for cycling through command history?
  // here we show the default keys, ctrl+p and ctrl+n
  // input.keyCycleForward = function(key) { return (key.code === 78 && key.ctrl); }; // ctrl+n
  // input.keyCycleBackward = function(key) { return (key.code === 80 && key.ctrl); }; // ctrl+p
  
</script>

</body>
</html>

